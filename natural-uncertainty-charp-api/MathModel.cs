//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MathModel : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MathModel(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MathModel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MathModel obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~MathModel() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          natural_uncertainty_libPINVOKE.delete_MathModel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public MathModel() : this(natural_uncertainty_libPINVOKE.new_MathModel__SWIG_0(), true) {
  }

  public MathModel(AlternativeList alternatives, UncertaintyList uncertainties) : this(natural_uncertainty_libPINVOKE.new_MathModel__SWIG_1(AlternativeList.getCPtr(alternatives), UncertaintyList.getCPtr(uncertainties)), true) {
    if (natural_uncertainty_libPINVOKE.SWIGPendingException.Pending) throw natural_uncertainty_libPINVOKE.SWIGPendingException.Retrieve();
  }

  public MathModel(MathModel mathModel) : this(natural_uncertainty_libPINVOKE.new_MathModel__SWIG_2(MathModel.getCPtr(mathModel)), true) {
    if (natural_uncertainty_libPINVOKE.SWIGPendingException.Pending) throw natural_uncertainty_libPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAlternatives(AlternativeList alternatives) {
    natural_uncertainty_libPINVOKE.MathModel_setAlternatives(swigCPtr, AlternativeList.getCPtr(alternatives));
    if (natural_uncertainty_libPINVOKE.SWIGPendingException.Pending) throw natural_uncertainty_libPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setUncertainties(UncertaintyList uncertainties) {
    natural_uncertainty_libPINVOKE.MathModel_setUncertainties(swigCPtr, UncertaintyList.getCPtr(uncertainties));
    if (natural_uncertainty_libPINVOKE.SWIGPendingException.Pending) throw natural_uncertainty_libPINVOKE.SWIGPendingException.Retrieve();
  }

  public AlternativeList getAlternatives() {
    AlternativeList ret = new AlternativeList(natural_uncertainty_libPINVOKE.MathModel_getAlternatives(swigCPtr), true);
    return ret;
  }

  public UncertaintyList getUncertainties() {
    UncertaintyList ret = new UncertaintyList(natural_uncertainty_libPINVOKE.MathModel_getUncertainties(swigCPtr), true);
    return ret;
  }

  public bool isValid() {
    bool ret = natural_uncertainty_libPINVOKE.MathModel_isValid(swigCPtr);
    return ret;
  }

}

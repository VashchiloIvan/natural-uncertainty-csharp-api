//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NaturalUncertaintyCsharpApi {

public class ProbabilisticAlternative : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ProbabilisticAlternative(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ProbabilisticAlternative obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ProbabilisticAlternative obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ProbabilisticAlternative() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libnatural_uncertaintyPINVOKE.delete_ProbabilisticAlternative(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ProbabilisticAlternative(string name, DoubleList marks, DoubleList probabilities) : this(libnatural_uncertaintyPINVOKE.new_ProbabilisticAlternative(name, DoubleList.getCPtr(marks), DoubleList.getCPtr(probabilities)), true) {
    if (libnatural_uncertaintyPINVOKE.SWIGPendingException.Pending) throw libnatural_uncertaintyPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isValid() {
    bool ret = libnatural_uncertaintyPINVOKE.ProbabilisticAlternative_isValid(swigCPtr);
    if (libnatural_uncertaintyPINVOKE.SWIGPendingException.Pending) throw libnatural_uncertaintyPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getName() {
    string ret = libnatural_uncertaintyPINVOKE.ProbabilisticAlternative_getName(swigCPtr);
    if (libnatural_uncertaintyPINVOKE.SWIGPendingException.Pending) throw libnatural_uncertaintyPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleList getMarks() {
    DoubleList ret = new DoubleList(libnatural_uncertaintyPINVOKE.ProbabilisticAlternative_getMarks(swigCPtr), true);
    if (libnatural_uncertaintyPINVOKE.SWIGPendingException.Pending) throw libnatural_uncertaintyPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleList getProbabilities() {
    DoubleList ret = new DoubleList(libnatural_uncertaintyPINVOKE.ProbabilisticAlternative_getProbabilities(swigCPtr), true);
    if (libnatural_uncertaintyPINVOKE.SWIGPendingException.Pending) throw libnatural_uncertaintyPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMarks(DoubleList marks) {
    libnatural_uncertaintyPINVOKE.ProbabilisticAlternative_setMarks(swigCPtr, DoubleList.getCPtr(marks));
    if (libnatural_uncertaintyPINVOKE.SWIGPendingException.Pending) throw libnatural_uncertaintyPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setProbabilities(DoubleList probabilities) {
    libnatural_uncertaintyPINVOKE.ProbabilisticAlternative_setProbabilities(swigCPtr, DoubleList.getCPtr(probabilities));
    if (libnatural_uncertaintyPINVOKE.SWIGPendingException.Pending) throw libnatural_uncertaintyPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getMathematicalExpectation() {
    double ret = libnatural_uncertaintyPINVOKE.ProbabilisticAlternative_getMathematicalExpectation(swigCPtr);
    if (libnatural_uncertaintyPINVOKE.SWIGPendingException.Pending) throw libnatural_uncertaintyPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
